const admin = require('firebase-admin');
const serviceAccount = require('./serviceAccountKey.json');

admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

// Cache paths matching straight-cache-homey.html
const CACHES = {
    ai: 'artifacts/nerdfootball/pools/nerduniverse-2025/cache/latest-ai-intel-sheet',
    espn: 'cache/espn_current_data',
    season: 'cache/season_leaderboard_2025',
    weekly: 'cache/weekly_leaderboard_2025_week_5',
    survivor: 'cache/survivor_pool_2025'
};

const ENDPOINTS = {
    // AI cache is generated by frontend page load - no direct API
    // ESPN cache is generated by ESPN API calls - no direct regenerate endpoint
    season: 'https://generateseasonleaderboardcache-np7uealtnq-uc.a.run.app',
    weekly: 'https://generateweeklyleaderboardcache-np7uealtnq-uc.a.run.app?week=5',
    survivor: 'https://getsurvivorpooldata-np7uealtnq-uc.a.run.app'
};

// Caches to skip verification (generated on-demand by apps, not by dedicated endpoints)
const SKIP_VERIFICATION = ['ai', 'espn'];

async function deleteAllCaches() {
    console.log('\nüóëÔ∏è  DELETING ALL CACHES...\n');

    for (const [name, path] of Object.entries(CACHES)) {
        try {
            await db.doc(path).delete();
            console.log(`‚úÖ Deleted ${name}: ${path}`);
        } catch (error) {
            console.log(`‚ö†Ô∏è  Error deleting ${name}: ${error.message}`);
        }
    }
}

async function regenerateAllCaches() {
    console.log('\nüîÑ REGENERATING ALL CACHES...\n');

    for (const [name, url] of Object.entries(ENDPOINTS)) {
        try {
            const startTime = Date.now();
            const response = await fetch(url);
            const elapsed = Date.now() - startTime;

            if (response.ok) {
                console.log(`‚úÖ Regenerated ${name} (${elapsed}ms)`);
            } else {
                console.log(`‚ùå Failed to regenerate ${name}: HTTP ${response.status}`);
            }
        } catch (error) {
            console.log(`‚ùå Error regenerating ${name}: ${error.message}`);
        }
    }

    // Wait for async writes to complete
    console.log('\n‚è≥ Waiting 3 seconds for cache writes to complete...');
    await new Promise(resolve => setTimeout(resolve, 3000));
}

async function verifyAllCaches() {
    console.log('\nüîç VERIFYING CACHES WITH DEDICATED ENDPOINTS...\n');

    let allExist = true;

    for (const [name, path] of Object.entries(CACHES)) {
        // Skip caches that are generated on-demand by apps
        if (SKIP_VERIFICATION.includes(name)) {
            console.log(`‚è≠Ô∏è  ${name}: SKIPPED (generated on-demand by app)`);
            continue;
        }

        try {
            const doc = await db.doc(path).get();
            if (doc.exists) {
                const data = doc.data();
                const generatedAt = data.generatedAt || data.timestamp;
                const age = generatedAt ? Math.floor((Date.now() - generatedAt) / 1000) : 'N/A';
                console.log(`‚úÖ ${name}: EXISTS (age: ${age}s)`);
            } else {
                console.log(`‚ùå ${name}: DOES NOT EXIST`);
                allExist = false;
            }
        } catch (error) {
            console.log(`‚ùå ${name}: ERROR - ${error.message}`);
            allExist = false;
        }
    }

    return allExist;
}

async function runTest() {
    console.log('üöÄ STARTING 2-ROUND CACHE TEST\n');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    // ROUND 1
    console.log('\nüéØ ROUND 1: DELETE ‚Üí REGENERATE ‚Üí VERIFY');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    await deleteAllCaches();
    await regenerateAllCaches();
    const round1Success = await verifyAllCaches();

    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`ROUND 1 RESULT: ${round1Success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    // ROUND 2
    console.log('\nüéØ ROUND 2: DELETE ‚Üí REGENERATE ‚Üí VERIFY');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    await deleteAllCaches();
    await regenerateAllCaches();
    const round2Success = await verifyAllCaches();

    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`ROUND 2 RESULT: ${round2Success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    // FINAL SUMMARY
    console.log('\nüèÅ FINAL TEST SUMMARY:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`Caches Tested: 3 (season, weekly, survivor)`);
    console.log(`Caches Skipped: 2 (ai, espn - generated on-demand by apps)`);
    console.log(`\nRound 1: ${round1Success ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    console.log(`Round 2: ${round2Success ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    console.log(`\nOverall: ${round1Success && round2Success ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED'}`);
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    process.exit(round1Success && round2Success ? 0 : 1);
}

runTest().catch(err => {
    console.error('\n‚ùå FATAL ERROR:', err);
    process.exit(1);
});
