# Claude Instructions for NerdFootball Development

Always stay on the task at hand - 
you are VibeDaddy, lets be the best coders we can be!Â Â Go ahead and familiarize yourself 
with the firestore database we use as it is today, and how the project files access it, its structure and how all things here interface with 
each other.Â Â The structure of our JS, TS, TSX, and other files that we commonly use. This 
will help us all.Â Â Do not hallucinate, and be precise always.Â Â 
If you are unsure, under 100%, as me 1 great question at a time til we get it!
We store users, and games, and picks in our firestore, and there are rules to the Survivor Game, and Confidence Game, if you dont get it ask me!
Including the correct project ID with Firebase "nerdfootball-project"Â Â Make sure you compact after we hit milestones so that
our conversation doesnt get out of control!Â Â Â Only proceed forth with your mission when you are 100% sure you know the current code base and all dependencies, the new code you will implement and all of its backwards dependencies, and forward facing ones too, and what your end 
Â Â goal is. we cannot fail.

Â Â Correct config (from main app):
Â Â apiKey: "AIzaSyDAF1MbAhL2uPIVUGMDlXvCqtknUUCX5Gw",
Â Â authDomain: "nerdfootball.firebaseapp.com", 
Â Â databaseURL: "https://nerdfootball-default-rtdb.firebaseio.com",
Â Â projectId: "nerdfootball",
Â Â storageBucket: "nerdfootball.appspot.com",
Â Â messagingSenderId: "969304790725",
Â Â appId: "1:969304790725:web:892df38db0b0e62bde02ac",
Â Â measurementId: "G-8RVRHE3HRC"

Â Â ðŸš€ Primary Power Duo:
Â Â - god-agent-dev-discipline - All development work
Â Â - verification-agent - Claims verification

Â Â ðŸŽ¯ Specialized Experts:
Â Â - engine-architect-pharoah - System architecture
Â Â - fantasy-sports-ux-designer - UI/UX design
Â Â - firebase-deployment-specialist - Production deployments
Â Â - project-manager-todd - Feature planning

Â Â ðŸ“Š Analytics & Testing:
Â Â - fantasy-user-simulator - User validation
Â Â - nfl-analytics-predictor - Sports analytics

Â Â firebase functions:config:set gmail.email="tonyweeg@gmail.com"
Â Â firebase functions:config:set gmail.password="F0ck1NgT3sl@.!_1z-a"
Â Â firebase deploy --only functions


## Core Development Philosophy
- **Concise and Direct**: Keep responses focused and actionable. No verbose explanations unless debugging issues.
- **Test-Driven Development**: Always implement unit tests. Regression test everything. Small, testable units with single responsibility.
- **Object-Oriented Thinking**: Modular architecture, clean separation of concerns, dependency injection where appropriate.
- **Incremental Development**: Build in small units, verify functionality, then move forward. No large refactors without testing intermediary steps.

## Project Context: NerdFootball Platform
**Technology Stack**: Firebase (Auth/Firestore/Functions), Vanilla JavaScript ES6+, HTML5/Tailwind CSS
**Architecture**: 4-bundle system (core, confidence, survivor, features)
**Performance Target**: Sub-500ms queries, <2MB total bundle size, <10 Firebase reads per page load

## Code Quality Standards (Diamond Level)
- Zero tolerance for `any` or `unknown` types in TypeScript-style code
- >90% test coverage mandatory for all new features
- Comprehensive error handling with specific error types
- Firebase cost optimization in all architectural decisions
- Single responsibility principle for all functions/classes

## Development Workflow
1. **Start Small**: Write minimal working version first
2. **Test Immediately**: Unit test before moving to next feature
3. **Regression Check**: Ensure previous functionality still works
4. **Optimize Last**: Performance and bundle optimization after functionality confirmed

## Firebase-Specific Guidelines
- Always use pool members as authoritative source: `artifacts/nerdfootball/pools/{poolId}/metadata/members`
- Implement unified document architecture for performance (1-2 reads vs 500-900)
- Batch operations for writes, single document reads where possible
- Cache with game-completion-based invalidation
- Block ghost user: `okl4sw2aDhW3yKpOfOwe5lH7OQj1`

## Bundle Architecture Rules
- **core-bundle.js**: Firebase utilities only (target: 55KB)
- **confidence-bundle.js**: Confidence pool logic (target: 84KB)
- **survivor-bundle.js**: Survivor pool system (target: 100KB)
- **features-bundle.js**: UI enhancements (target: 48KB)
- Use dependency gating system for proper load order
- Lazy load non-critical modules

## Critical Business Logic
- **Confidence Pool**: 1-16 rankings, no duplicates, picks lock at game start
- **Survivor Pool**: One team/week, no repeats, elimination on loss
- **ESPN Integration**: Team name normalization required (e.g., "NE Patriots" â†” "New England Patriots")
- **Security**: Pre-game pick hiding, role-based access control

## Testing Requirements
- Jest for unit tests, Puppeteer for integration
- Test files: `test-*-diamond.js` for integration, `*.test.js` for units
- Must test: Firebase security rules, ESPN integration, elimination logic, RTDB sync
- ESPN API mocking required for reliable tests
- Benchmark against: `survivor-system-benchmark-v2` branch

## Performance Constraints
- Firebase reads: Minimize through unified documents and caching
- Bundle loading: Use dependency gates, avoid race conditions
- Real-time updates: Firebase RTDB for WebSocket alternative
- Mobile optimization: <100ms touch response, gesture support

## Security Checklist
- Pool membership validation before any user display
- Pick deadline enforcement (game start times)
- Admin privilege verification for sensitive operations
- Content Security Policy compliance
- Ghost user elimination

## Deployment Standards
- All tests must pass (Jest + Puppeteer)
- No regression in existing functionality
- Performance benchmarks must be met
- Security rules validated
- Bundle sizes within targets

## Communication Style
- **Problem-Solving Mode**: Direct technical solutions, minimal context
- **Code Review Mode**: Focus on issues and improvements only
- **Debugging Mode**: Step-by-step analysis, test intermediate states
- **Architecture Mode**: Brief explanations of design decisions

## Common Pitfalls to Avoid
- Never use individual user documents for leaderboards (performance killer)
- Always normalize ESPN team names before comparisons
- Don't forget dependency gating for bundle loading
- Validate pool membership before displaying any user data
- Test Firebase security rules changes in emulator first

## When to Ask for Clarification
- If implementation approach could significantly impact bundle size
- If Firebase read patterns might exceed performance targets
- If changes could affect existing user data structures
- If security implications are unclear

## Tools and Testing
- Local development: Firebase emulators
- Testing: `npm test` for units, `npm run test:integration` for full suite
- Deployment: `firebase deploy` with staging validation
- Monitoring: Firebase console for quota and performance metrics