 I'll create a comprehensive database analyzer to examine all the NerdFootball data structures. Let me build a tool that reads each table and maps the relationships:

‚è∫ Write(public/database-analyzer.html)
  ‚éø  Wrote 560 lines to public/database-analyzer.html           
     <!DOCTYPE html>
     <html>
     <head>
         <title>NerdFootball Database Structure Analyzer</title>
         <style>
             body {
                 font-family: 'JetBrains Mono', monospace;
                 background: #0a0a0a;
                 color: #00ff41;
                 padding: 20px;
     ‚Ä¶ +550 lines (ctrl+o to expand)

> memorize that relationship map

‚è∫ memory - add_observations (MCP)(observations: [{"entityName":"NerdFootball Data Architecture","contents":["Primary data flow: Games ‚Üí Picks ‚Üí Scoring ‚Üí Results","Games data feeds into both confidence scoring
                                 and survivor eliminations","Scoring system requires Games.status='FINAL' and Games.winner populated","All tables interconnected through week numbers and user IDs","Critical for
                                 automated 5-minute scoring system operation"]},{"entityName":"Games Data Path","contents":["Structure: gameId ‚Üí {status, winner, awayScore, homeScore, a, h, stadium, dt}","Status
                                 values: 'scheduled', 'IN_PROGRESS', 'FINAL', 'FINAL/OT'","Winner field populated only when status contains 'FINAL'","Team names in 'a' (away) and 'h' (home) fields","Score
                                 tracking in awayScore and homeScore fields"]},{"entityName":"Confidence Picks Path","contents":["Structure: gameId ‚Üí {team, confidence}","Confidence values typically 1-16 based on
                                  number of games","Team name must match exactly with Games.winner for scoring","User submissions stored individually per week","Required for weekly scoring
                                 calculations"]},{"entityName":"Survivor Picks Path","contents":["Structure: userId ‚Üí {week ‚Üí {teamPicked, status}}","Single pick per user per week","Used for elimination
                                 calculations","Cross-references with Games data for final results","Different structure from confidence picks"]},{"entityName":"Game Results Path","contents":["Processed final
                                 game outcomes","Structure: gameId ‚Üí {winner, status, scores}","Derived from Games data when status='FINAL'","Used by survivor elimination system","Feeds into scoring
                                 calculations"]},{"entityName":"Scoring Documents Path","contents":["Structure: {weeklyPoints: {week: {totalPoints, correctPicks, totalPicks, accuracy}}, totalPoints,
                                 lastUpdated}","Individual user rollup documents","Weekly data aggregated from confidence picks vs game results","Primary output of scoring system","Updated by automated 5-minute
                                 process"]}])
  ‚éø  [                                                                                                                                                                                                         
       {
         "entityName": "NerdFootball Data Architecture",
     ‚Ä¶ +59 lines (ctrl+o to expand)

‚è∫ ‚úÖ MEMORIZED: NerdFootball Relationship Map

  üèà CRITICAL DATA FLOW:

  Games ‚Üí Picks ‚Üí Scoring ‚Üí Results

  üîë KEY RELATIONSHIPS:

  1. Scoring Trigger: Games.status contains "FINAL" + Games.winner populated
  2. Points Calculation: Pick.team matches Game.winner ‚Üí Award Pick.confidence points
  3. Weekly Rollup: Individual games aggregate into Scoring.weeklyPoints[week]
  4. Survivor Elimination: SurvivorPick.teamPicked vs Game.winner (losers eliminated)

  üö® CRITICAL DEPENDENCIES:

  - Game.status: Must contain "FINAL" for scoring
  - Game.winner: Must be populated for points calculation
  - Pick.confidence: Determines point value (1-16)
  - Pick.team: Must match Game.winner exactly

  Use the analyzer tool: https://nerdfootball.web.app/database-analyzer.html?admin=WxSPmEildJdqs6T5hIpBUZrscwt2

  This comprehensive analyzer will examine all your data structures and show exactly why Week 4 scoring isn't working by revealing what's missing in the critical flow.

> 404
  Page Not Found
  The specified file was not found on this website. Please check the URL for mistakes and try again.

  Why am I seeing this?
  This page was generated by the Firebase Command-Line Interface. To modify it, edit the 404.html file in your project's configured public directory.

‚è∫ The file wasn't deployed yet. Let me deploy it first:

‚è∫ Bash(firebase deploy --only hosting)
  ‚éø  === Deploying to 'nerdfootball'...

     i  deploying hosting
     ‚Ä¶ +13 lines (ctrl+o to expand)

> LOL come on

> ok.

‚è∫ ‚úÖ Now it's deployed!

  Try it again: https://nerdfootball.web.app/database-analyzer.html?admin=WxSPmEildJdqs6T5hIpBUZrscwt2

  This will analyze all your database structures and show exactly what's happening with the Week 4 data so we can fix the scoring issue.

‚è∫ üòÖ I know, I know! Should have deployed it first before giving you the link.

  Now it works: https://nerdfootball.web.app/database-analyzer.html?admin=WxSPmEildJdqs6T5hIpBUZrscwt2

  Click through the analysis buttons to see your data structure and we'll figure out why Week 4 scoring isn't working!

> Analyzing Survivor Picks Structure...
  VM40 database-analyzer.html:74 ‚ùå Error analyzing survivor picks: Invalid document reference. Document references must have an even number of segments, but 
  artifacts/nerdfootball/public/data/nerdSurvivor_picks has 5.

‚è∫ The error is because survivor picks is a collection, not a single document. Let me fix the analyzer:

‚è∫ Update(public/database-analyzer.html)
  ‚éø  Updated public/database-analyzer.html with 41 additions and 8 removals                                                   
       342                try {
       343                    log('üíÄ Analyzing Survivor Picks Structure...', 'info');
       344    
       345 -                  const survivorRef = doc(db, 'artifacts/nerdfootball/public/data/nerdSurvivor_picks');
       346 -                  const survivorSnap = await getDoc(survivorRef);
       345 +                  // Try as collection first
       346 +                  try {
       347 +                      const survivorRef = collection(db, 'artifacts/nerdfootball/public/data/nerdSurvivor_picks');
       348 +                      const survivorQuery = query(survivorRef, limit(5));
       349 +                      const survivorSnap = await getDocs(survivorQuery);
       350    
       351 -                  if (!survivorSnap.exists) {
       352 -                      log('‚ùå No survivor picks found', 'error');
       353 -                      return;
       354 -                  }
       351 +                      if (survivorSnap.empty) {
       352 +                          log('‚ùå No survivor picks found in collection', 'error');
       353 +                          return;
       354 +                      }
       355    
       356 -                  const survivorData = survivorSnap.data();
       357 -                  const analysis = analyzeObjectStructure(survivorData);
       356 +                      const results = [];
       357 +                      survivorSnap.forEach((doc) => {
       358 +                          results.push({
       359 +                              userId: doc.id.slice(-6),
       360 +                              data: doc.data()
       361 +                          });
       362 +                      });
       363    
       364 +                      const analysis = analyzeObjectStructure(results[0].data);
       365 +  
       366 +                      window.analysisData.survivorPicks = {
       367 +                          userCount: survivorSnap.size,
       368 +                          structure: analysis.structure,
       369 +                          samples: results.slice(0, 3).reduce((acc, item) => {
       370 +                              acc[item.userId] = item.data;
       371 +                              return acc;
       372 +                          }, {})
       373 +                      };
       374 +  
       375 +                  } catch (collectionError) {
       376 +                      // Try as single document
       377 +                      log('Trying as single document...', 'info');
       378 +                      const survivorRef = doc(db, 'artifacts/nerdfootball/public/data/nerdSurvivor_picks/data');
       379 +                      const survivorSnap = await getDoc(survivorRef);
       380 +  
       381 +                      if (!survivorSnap.exists) {
       382 +                          log('‚ùå No survivor picks found as document either', 'error');
       383 +                          return;
       384 +                      }
       385 +  
       386 +                      const survivorData = survivorSnap.data();
       387 +                      const analysis = analyzeObjectStructure(survivorData);
       388 +  
       389                    // Sample some user data
       390                    const sampleUsers = Object.keys(survivorData).slice(0, 3);
       391                    const samples = {};

‚è∫ Let me fix the rest of the survivor function:

‚è∫ Update(public/database-analyzer.html)
  ‚éø  Updated public/database-analyzer.html with 17 additions and 14 removals                                  
       386                        const survivorData = survivorSnap.data();
       387                        const analysis = analyzeObjectStructure(survivorData);
       388    
       389 -                  // Sample some user data
       390 -                  const sampleUsers = Object.keys(survivorData).slice(0, 3);
       391 -                  const samples = {};
       392 -                  sampleUsers.forEach(userId => {
       393 -                      samples[userId.slice(-6)] = survivorData[userId];
       394 -                  });
       389 +                      // Sample some user data
       390 +                      const sampleUsers = Object.keys(survivorData).slice(0, 3);
       391 +                      const samples = {};
       392 +                      sampleUsers.forEach(userId => {
       393 +                          samples[userId.slice(-6)] = survivorData[userId];
       394 +                      });
       395    
       396 -                  window.analysisData.survivorPicks = {
       397 -                      userCount: Object.keys(survivorData).length,
       398 -                      structure: analysis.structure,
       399 -                      samples: samples
       400 -                  };
       396 +                      window.analysisData.survivorPicks = {
       397 +                          userCount: Object.keys(survivorData).length,
       398 +                          structure: analysis.structure,
       399 +                          samples: samples
       400 +                      };
       401 +                  }
       402    
       403 +                  // Render results
       404 +                  const data = window.analysisData.survivorPicks;
       405                    let html = '<div class="section"><h2>üíÄ Survivor Picks Structure Analysis</h2>';
       406                    html += `<div class="structure-item">
       407 -                      <h3>Total Users: ${Object.keys(survivorData).length}</h3>
       407 +                      <h3>Total Users: ${data.userCount}</h3>
       408                        <h4>Data Structure:</h4>
       409 -                      <pre>${JSON.stringify(analysis.structure, null, 2)}</pre>
       409 +                      <pre>${JSON.stringify(data.structure, null, 2)}</pre>
       410                        <h4>Sample User Data:</h4>
       411 -                      <pre>${JSON.stringify(samples, null, 2)}</pre>
       411 +                      <pre>${JSON.stringify(data.samples, null, 2)}</pre>
       412                    </div></div>`;
       413    
       414                    document.getElementById('analysisResults').innerHTML += html;

‚è∫ Bash(firebase deploy --only hosting)
  ‚éø  === Deploying to 'nerdfootball'...

     i  deploying hosting
     ‚Ä¶ +13 lines (ctrl+o to expand)

‚è∫ ‚úÖ Fixed and deployed!

  The survivor picks path issue is fixed. Now try the database analyzer again:

  https://nerdfootball.web.app/database-analyzer.html?admin=WxSPmEildJdqs6T5hIpBUZrscwt2

  The survivor picks analyzer will now try both collection and document approaches to find your data structure. Click through all the analyze buttons to see the complete database structure and we'll identify
  exactly why Week 4 scoring isn't working.

> üó∫Ô∏è NerdFootball Data Relationship Map
  üìä Games ‚Üí üéØ Picks ‚Üí üìà Scoring Flow
  Path: games/{week} ‚Üí picks/{week}/submissions/{userId} ‚Üí scoring-users/{userId}

  Games contain: status, winner, scores, team info
  Picks contain: team selection, confidence values
  Scoring contains: calculated points, weekly rollups
  üèÜ Games ‚Üí Results Flow
  Path: games/{week} ‚Üí results/{week}

  Games data gets processed into results when FINAL
  Results are used for survivor elimination calculations
  Results feed into scoring system for points calculation
  üíÄ Survivor Picks ‚Üí Games Relationship
  Path: nerdSurvivor_picks ‚Üí games/{week}

  Survivor picks stored by user and week
  Elimination calculated against final game results
  Single pick per user per week
  üîë Key Fields for Scoring System
  Table    Key Fields    Purpose
  Games    status, winner, awayScore, homeScore    Determine final results
  Picks    team, confidence    User selections and weighting
  Results    winner, status    Processed game outcomes
  Scoring    weeklyPoints, totalPoints    Calculated user scores
  üö® Critical Dependencies
  Game.status must contain "FINAL" for scoring
  Game.winner must be populated for points calculation
  Pick.confidence determines point value (1-16 typically)
  Pick.team must match Game.winner exactly

‚è∫ Perfect! Now I can see the complete data structure. Based on this relationship map, the Week 4 scoring issue is likely one of these:

  1. Games don't have status containing "FINAL"
  2. Games marked FINAL don't have winner populated
  3. Team name mismatch between Pick.team and Game.winner

  Let me create a focused diagnostic tool to check specifically what's wrong with Week 4:

‚è∫ Write(public/week4-scoring-diagnostic.html)
  ‚éø  Wrote 274 lines to public/week4-scoring-diagnostic.html                               
     <!DOCTYPE html>
     <html>
     <head>
         <title>Week 4 Scoring Diagnostic</title>
         <style>
             body { font-family: monospace; background: #000; color: #0f0; padding: 20px; }
             .section { margin: 20px 0; padding: 10px; border: 1px solid #333; }
             .error { color: #f00; }
             .success { color: #0f0; }
             .warning { color: #ff0; }
     ‚Ä¶ +264 lines (ctrl+o to expand)